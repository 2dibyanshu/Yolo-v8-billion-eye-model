version: "3.8"

networks:
  app_network:  # Define a custom network

services:
  app:
    build: .
    env_file: 
      - .env
    depends_on:
      - mongodb
      - rabbitmq
      - minio
      - deduplication_services
    restart: always
    environment:
      - PYTHONUNBUFFERED=1  # Ensures logs are flushed immediately
    command: python /app/optimize_yolo_mongodb.py  # Explicitly use Python
    networks:
      - app_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    logging:
      driver: "none"
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq_config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  deduplication_services:
    image: ashpikachu2001/deduplication_services:V1.3
    container_name: deduplication_services
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app_network
    tty: true

  billion_eye_backend:
    image: surajkumarsahoo/billion-eye-backend:latest
    container_name: billion_eye_backend
    restart: always
    ports:
      - "5000:5000"
    expose:
      - "5000"
    networks:
      - app_network

  billion_eye_nginx:
    image: surajkumarsahoo/billion-eye-nginx:latestchange
    container_name: billion_eye_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app_network

  billion_eye_interface:
    image: surajkumarsahoo/billion-eye-interface:latest
    container_name: billion_eye_interface
    restart: always
    ports:
      - "3000:3000"
    expose:
      - "3000"
    networks:
      - app_network

volumes:
  mongo_data:
  minio_data:
  rabbitmq_data:
